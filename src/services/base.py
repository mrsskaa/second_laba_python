# Импорт абстрактного базового класса и декоратора для создания абстрактных методов
# ABC - абстрактный базовый класс, который нельзя создать напрямую
# abstractmethod - декоратор для методов, которые должны быть реализованы в дочерних классах
from abc import ABC, abstractmethod

# Импорт типа PathLike для работы с путями файловой системы
# PathLike - тип для объектов, которые представляют путь к файлу (строки, Path и т.д.)
from os import PathLike

# Импорт типа Literal для создания литеральных типов
# Literal - тип, который может быть только одним из указанных значений
from typing import Literal

# Импорт перечислений для режимов чтения файлов и отображения
from src.enums import FileReadMode, FileDisplayMode


# ============================================
# БАЗОВЫЙ КЛАСС ДЛЯ СЕРВИСОВ КОНСОЛИ
# ============================================

class OSConsoleServiceBase(ABC):
    """
    Абстрактный базовый класс для сервисов консоли операционной системы.

    Что это такое?
    - Это "чертеж" для создания сервисов консоли
    - Определяет, какие методы ДОЛЖНЫ быть реализованы в дочерних классах
    - Нельзя создать объект этого класса напрямую

    Зачем это нужно?
    - Унификация: все сервисы консоли имеют одинаковый интерфейс
    - Полиморфизм: можно использовать любой сервис через базовый класс
    - Масштабируемость: легко добавить поддержку других ОС (Linux, Mac)

    Пример дочернего класса:
    - WindowsConsoleService - реализация для Windows
    - В будущем: LinuxConsoleService, MacConsoleService
    """

    @abstractmethod
    def ls(self, path: PathLike[str] | str, display_mode: FileDisplayMode = FileDisplayMode.simple) -> list[str]:
        """
        Абстрактный метод для отображения содержимого директории.

        Что делает?
        - Получает список файлов и папок в указанной директории
        - Форматирует их в зависимости от режима отображения

        :param path: Путь к директории для отображения
                     Может быть строкой "C:/Users" или объектом Path
        :param display_mode: Режим отображения (простой или подробный)
                             simple - только имена
                             detailed - с размером, датой, правами
        :return: Список строк с информацией о файлах и директориях
                 Каждая строка заканчивается переносом строки \n

        Почему абстрактный?
        - Каждая ОС реализует это по-своему
        - Windows и Linux могут по-разному форматировать права доступа
        """
        # ... означает, что метод не имеет реализации
        # Дочерние классы ОБЯЗАНЫ реализовать этот метод
        ...

    @abstractmethod
    def cat(self, filename: PathLike | str, mode: Literal[FileReadMode.string, FileReadMode.bytes] = FileReadMode.string)->str | bytes:
        """
        Абстрактный метод для чтения и отображения содержимого файла.

        Что делает?
        - Читает содержимое файла
        - Возвращает его в виде строки или байтов

        :param filename: Путь к файлу для чтения
                         Может быть строкой или объектом Path
        :param mode: Режим чтения файла (текстовый или бинарный)
                     FileReadMode.string - читает как текст (UTF-8)
                     FileReadMode.bytes - читает как байты
        :return: Содержимое файла в виде строки или байтов

        Почему абстрактный?
        - Разные ОС могут по-разному работать с файлами
        - Нужна разная обработка ошибок для разных ОС
        """
        # ... означает, что метод не имеет реализации
        # Дочерние классы ОБЯЗАНЫ реализовать этот метод
        ...

    @abstractmethod
    def cd(self, path: PathLike[str] | str)->str:
        """
        Абстрактный метод для перехода в указанный каталог (смена рабочей директории).

        Что делает?
        - Переходит в указанную директорию
        - Поддерживает специальные пути (. , ~)
        - Возвращает новый абсолютный путь

        :param path: Путь к директории для перехода
                     Может быть относительным или абсолютным
                     . - текущая директория
                     .. - родительская директория (на уровень выше)
                     ~ - домашняя директория пользователя
        :return: Абсолютный путь к новой рабочей директории

        Почему абстрактный?
        - Разные ОС могут по-разному работать с путями
        - Нужна разная обработка ошибок для разных ОС

        :raises FileNotFoundError: Если директория не существует
        :raises NotADirectoryError: Если путь не является директорией
        """
        # ... означает, что метод не имеет реализации
        # Дочерние классы ОБЯЗАНЫ реализовать этот метод
        ...

    @abstractmethod
    def cp(self, src: PathLike[str] | str, dst: PathLike[str] | str, recursive: bool = False) -> None:
        """
        Абстрактный метод для копирования файла или каталога.

        :param src: Путь к исходному файлу/каталогу
        :param dst: Путь к месту назначения (файл или существующий каталог)
        :param recursive: Рекурсивно копировать каталоги (как -r/-г)
        :raises FileNotFoundError: Если источник не существует
        :raises IsADirectoryError: Если источник каталог без recursive=True
        :raises PermissionError: Если недостаточно прав
        :raises OSError: Прочие ошибки файловой системы
        """
        ...

    @abstractmethod
    def mv(self, src: PathLike[str] | str, dst: PathLike[str] | str) -> None:
        """
        Абстрактный метод для перемещения/переименования файла или каталога.

        Поддерживает перемещение в существующий каталог и переименование.

        :param src: Источник (файл или каталог)
        :param dst: Назначение (файл/каталог/новое имя)
        :raises FileNotFoundError: Если источник не существует
        :raises PermissionError: Если недостаточно прав
        :raises OSError: Прочие ошибки файловой системы
        """
        ...

    @abstractmethod
    def rm(self, target: PathLike[str] | str, recursive: bool = False) -> None:
        """
        Абстрактный метод для удаления файла/каталога.

        Ограничения:
        - Запрещено удалять корень (/) и родительский каталог (..)

        :param target: Путь к удаляемому объекту
        :param recursive: Рекурсивное удаление каталогов (-r/-г)
        :raises FileNotFoundError: Если путь не существует
        :raises IsADirectoryError: Если удаляем каталог без recursive=True
        :raises PermissionError: Если недостаточно прав
        :raises OSError: Прочие ошибки файловой системы
        """
        ...
