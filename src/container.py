# Импорт декоратора dataclass для создания классов данных
# @dataclass - декоратор, который автоматически создает методы __init__, __repr__, __eq__ и т.д.
from dataclasses import dataclass

# Импорт базового класса для сервисов консоли
# OSConsoleServiceBase - абстрактный класс, который определяет интерфейс для работы с консолью
from src.services.base import OSConsoleServiceBase


# ============================================
# КОНТЕЙНЕР ЗАВИСИМОСТЕЙ
# ============================================

@dataclass
class Container:
    """
    Контейнер зависимостей (Dependency Injection Container).

    Что это такое?
    - Это объект, который хранит все нужные сервисы приложения
    - Вместо того, чтобы создавать объекты в разных местах кода,
      мы создаем их один раз здесь и передаем туда, где они нужны

    Зачем это нужно?
    - Упрощает управление зависимостями (какие классы от кого зависят)
    - Упрощает тестирование (можно подменить реальный сервис на заглушку)
    - Централизованное управление объектами

    Пример:
    - Вместо создания WindowsConsoleService в каждом месте кода,
      мы создаем его один раз в main() и передаем через контейнер
    """
    # Сервис для работы с консолью операционной системы
    # console_service - это объект с методами для работы с файлами (ls, cat)
    # OSConsoleServiceBase - базовый класс, реальный класс будет WindowsConsoleService
    console_service: OSConsoleServiceBase
