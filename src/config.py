
# ============================================
# КОНФИГУРАЦИЯ ЛОГИРОВАНИЯ
# ============================================
# Этот файл настраивает систему логирования для всего приложения
# Логи - это записи о том, что происходит в программе (ошибки, информация, отладка)

# Словарь со всеми настройками логирования
# Этот словарь будет использован модулем logging для настройки системы логирования
LOGGING_CONFIG = {
    # Версия схемы конфигурации логирования
    # version: 1 - это стандартная версия, ее нужно указывать всегда
    "version": 1,

    # Не отключаем существующие логгеры при применении конфигурации
    # Если True, то все существующие логгеры будут отключены
    # Если False - работают старые + новые логгеры
    "disable_existing_loggers": False,

    # ============================================
    # FORMATTERS - Форматирование сообщений логов
    # ============================================
    # formatters определяют, КАК будут выглядеть сообщения в логах
    "formatters": {
        # Стандартный форматтер - один из возможных вариантов форматирования
        # Можно создать несколько форматтеров для разных целей
        "standard": {
            # Формат сообщения: время [уровень] имя_логгера: сообщение
            # %(asctime)s - время (например: 2024-01-15 10:30:45)
            # %(levelname)s - уровень логирования (DEBUG, INFO, WARNING, ERROR)
            # %(name)s - имя модуля, который пишет лог (например: src.main)
            # %(message)s - само сообщение лога
            "format": "%(asctime)s [%(levelname)s] %(name)s: %(message)s",

            # Формат времени: год-месяц-день час:минута:секунда
            # %Y - год (4 цифры), %m - месяц, %d - день
            # %H - час, %M - минута, %S - секунда
            "datefmt": "%Y-%m-%d %H:%M:%S",
        }
    },

    # ============================================
    # HANDLERS - Обработчики логов (куда пишутся логи)
    # ============================================
    # handlers определяют, КУДА будут писаться логи
    "handlers": {
        # Обработчик для вывода в консоль (терминал)
        # Все логи будут видны прямо в консоли, когда запускаем программу
        "console": {
            # Класс обработчика для вывода в поток (консоль)
            # StreamHandler - пишет логи в поток (stdout или stderr)
            "class": "logging.StreamHandler",

            # Используем стандартный форматтер (определен выше)
            # Форматер определяет, как будет выглядеть сообщение
            "formatter": "standard",

            # Минимальный уровень логирования для консоли
            # DEBUG - самый низкий уровень, пишутся ВСЕ логи
            # По возрастанию: DEBUG < INFO < WARNING < ERROR < CRITICAL
            "level": "DEBUG",
        },

        # Обработчик для записи в файл с ротацией
        # Логи также сохраняются в файл shell.log
        "file": {
            # Класс обработчика для записи в файл с автоматической ротацией
            # RotatingFileHandler - автоматически переименовывает старый файл, когда текущий становится слишком большим
            "class": "logging.handlers.RotatingFileHandler",

            # Используем стандартный форматтер
            "formatter": "standard",

            # Режим открытия файла: 'a' - append (добавление в конец файла)
            # Это значит, что новые логи добавляются к старым
            "mode": "a",

            # Имя файла для записи логов
            # Этот файл будет создан в корневой папке проекта
            "filename": "shell.log",

            # Максимальный размер файла перед ротацией (5 МБ)
            # Когда shell.log достигнет 5 МБ, он будет переименован в shell.log.1
            # Старый shell.log.1 станет shell.log.2 и так далее
            "maxBytes": 5 * 1024 * 1024,  # 5 MB before rotating

            # Количество резервных копий файлов логов
            # backupCount: 5 означает, что будет храниться 5 старых файлов
            # Пример: shell.log, shell.log.1, shell.log.2, shell.log.3, shell.log.4, shell.log.5
            # Когда shell.log.5 становится слишком большим, он удаляется
            "backupCount": 5,

            # Минимальный уровень логирования для файла
            # DEBUG - пишутся ВСЕ логи в файл
            "level": "DEBUG",
        },
    },

    # ============================================
    # LOGGERS - Настройка логгеров
    # ============================================
    # loggers определяют, КАКИЕ логи будут записываться
    "loggers": {
        # Корневой логгер (пустая строка означает все логгеры)
        # "" - это корневой логгер, который используется по умолчанию
        # Все модули, которые создают логгеры, будут использовать эти настройки
        "": {
            # Список обработчиков для этого логгера
            # "console" и "file" - имена обработчиков, определенных выше
            # Логи будут писаться и в консоль, и в файл одновременно
            "handlers": ["console", "file"],

            # Минимальный уровень логирования
            # DEBUG - пишутся все логи (от DEBUG до CRITICAL)
            "level": "DEBUG",

            # Разрешить распространение сообщений родительским логгерам
            # True - сообщения передаются родительским логгерам
            # False - сообщения обрабатываются только этим логгером
            "propagate": True,
        }
    },
}
